
call themis#option('recursive', 1)

" generation for the `user_command_help` test
execute 'helptags' expand('<sfile>:h:h') . '/doc'

let s:root = getcwd()

function! HelpeekTestHelper() abort
    let helper = {
        \ 'before_each': function('s:before_each'),
        \ 'after_each': function('s:after_each'),
    \ }

    function! helper.suite(name) abort
        let suite = themis#suite(a:name)
        let suite.before_each = self.before_each
        let suite.after_each = self.after_each
        return suite
    endfunction

    function! helper.assert() abort
        return s:assert()
    endfunction

    function! helper.create_buffer(line) abort
        call setbufline('%', 1, a:line)
        setlocal filetype=vim
    endfunction

    function! helper.search(pattern) abort
        let result = search(a:pattern)
        if result == 0
            let message = printf('%s not found', a:pattern)
            call self.assert.fail(message)
        endif
        return result
    endfunction

    return helper
endfunction

function! s:assert() abort
    let assert = themis#helper('assert')

    if has('nvim')
        function! assert.opened_help_tag(expected) abort
            call self.window_count(3)

            wincmd w
            call self.filetype(bufnr('%'), 'help')

            let haystack = getline(line('.') - 1)
            let needle = printf('*%s*', a:expected)
            let message = printf('help tag line should contain %s, but actual: %s', needle, haystack)
            call self.true(count(haystack, needle) != 0, message)
        endfunction
    else
        function! assert.opened_help_tag(expected) abort
            let popup = self._popup()
            let bufnr = winbufnr(popup)

            call self.filetype(bufnr, 'help')

            let line_number = popup_getpos(popup).firstline - 1
            let needle = printf('*%s*', a:expected)
            let line = getbufline(bufnr, line_number)[0]
            call self.true(count(line, needle) != 0, needle . ' must be in the haystack: ' . line)
        endfunction
    endif

    function! assert.window_count(count) abort
        let window_count = tabpagewinnr(tabpagenr(), '$')
        let message = printf('window count must be %s, but actual: %s', a:count, window_count)
        call self.equals(window_count, a:count, message)
    endfunction

    function! assert.not_exists_autocmd(name) abort
        let autocmds = s:redir('autocmd')
        for line in split(autocmds, "\n")
            call self.true(count(line, a:name, v:true) == 0, a:name . ' should not be in the autocmd: ' . line)
        endfor
    endfunction

    function! assert._popup() abort
        return popup_locate(3, &columns - 4)
    endfunction

    function! assert.not_exists_popup() abort
        let popup = self._popup()
        call self.equals(popup, 0, 'popup should exist')
    endfunction

    function! assert.column_number(expected) abort
        let actual = col('.')
        let message = printf('column number should be %s, but actual: %s', a:expected, actual)
        call self.equals(a:expected, actual, message)
    endfunction

    function! assert.filetype(bufnr, expected) abort
        let actual = getbufvar(a:bufnr, '&filetype')
        let message = printf('buffer &filetype should be %s, but actual: %s', a:expected, actual)
        call self.equals(a:expected, actual, message)
    endfunction

    return assert
endfunction

function! s:before_each() abort
    execute 'cd' s:root

    call helpeek#logger#set_func({ msg -> themis#log(msg) })
    call themis#log('')

    filetype on
    syntax enable
endfunction

function! s:after_each() abort
    tabedit
    tabonly!
    silent! %bwipeout!

    filetype off
    syntax off
endfunction

function! s:redir(cmd) abort
    let [tmp_verbose, tmp_verbosefile] = [&verbose, &verbosefile]
    set verbose=0 verbosefile=
    redir => result
    silent! execute a:cmd
    redir END
    let [&verbose, &verbosefile] = [tmp_verbose, tmp_verbosefile]
    return result
endfunction
